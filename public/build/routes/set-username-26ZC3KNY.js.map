{
  "version": 3,
  "sources": ["../../../app/routes/set-username.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/set-username.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/set-username.tsx\");\n  import.meta.hot.lastModified = \"1738605406629.747\";\n}\n// REMIX HMR END\n\nimport { redirect } from '@remix-run/cloudflare';\nimport { Form, useActionData } from '@remix-run/react';\nimport invariant from 'tiny-invariant';\nimport { Button } from '~/components/Button';\nimport { Input } from '~/components/Input';\nimport { ACCESS_AUTHENTICATED_USER_EMAIL_HEADER } from '~/utils/constants';\nimport { setUsername } from '~/utils/getUsername.server';\nconst allowedUsers = [{\n  email: \"fenil@codersboutique.com\",\n  password: \"fenil123\"\n}, {\n  email: \"kaustubh@codersboutique.com\",\n  password: \"fenil123\"\n}];\nexport const action = async ({\n  request\n}) => {\n  const url = new URL(request.url);\n  const returnUrl = url.searchParams.get('return-url') ?? '/';\n  const accessUsername = request.headers.get(ACCESS_AUTHENTICATED_USER_EMAIL_HEADER);\n  if (accessUsername) throw redirect(returnUrl);\n  const {\n    username,\n    email,\n    password\n  } = Object.fromEntries(await request.formData());\n  invariant(typeof username === 'string');\n  invariant(typeof email === \"string\");\n  invariant(typeof password === \"string\");\n  const isAllowed = allowedUsers.some(user => user.email === email && user.password === password);\n  if (!isAllowed) {\n    // Handle invalid credentials (you might want to return an error or redirect)\n    return {\n      error: \"Invalid email or password\"\n    };\n  }\n  return setUsername(username, request, returnUrl);\n};\nexport default function SetUsername() {\n  _s();\n  const actionData = useActionData();\n  return <div className=\"grid h-full gap-4 place-content-center w-full\">\n\t\t\t<h1 className=\"text-3xl font-bold\">Dating App</h1>\n\t\t\t{actionData?.error && <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\n\t\t\t\t\t<strong className=\"font-bold\">Error: </strong>\n\t\t\t\t\t<span className=\"block sm:inline\">{actionData.error}</span>\n\t\t\t\t</div>}\n\t\t\t<Form className=\"flex flex-col items-start gap-4 w-full\" method=\"post\">\n\t\t\t\t<div className=\"grid gap-3\">\n\t\t\t\t\t<label htmlFor=\"username\">Enter your display name</label>\n\t\t\t\t\t<Input autoComplete=\"off\" autoFocus required type=\"text\" id=\"username\" name=\"username\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"grid gap-3\">\n\t\t\t\t\t<label htmlFor=\"email\">Email</label>\n\t\t\t\t\t<Input required type=\"email\" id=\"email\" name=\"email\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"grid gap-3\">\n\t\t\t\t\t<label htmlFor=\"password\">Password</label>\n\t\t\t\t\t<Input required type=\"password\" id=\"password\" name=\"password\" />\n\t\t\t\t</div>\n\t\t\t\t<Button className=\"text-xs\" type=\"submit\">\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t</Form>\n\t\t</div>;\n}\n_s(SetUsername, \"fHVw5pq0Zwd2gXh2gyrnVdHnLCc=\", false, function () {\n  return [useActionData];\n});\n_c = SetUsername;\nvar _c;\n$RefreshReg$(_c, \"SetUsername\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,wBAAyB;AAMzB,yBAA4B;AAoCzB;AA9DH,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kCAAoC,EAAE;AAAA,EAC/E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA6B;AAC7B,cAAY,IAAI,eAAe;AACjC;AAyCe,SAAR,cAA+B;AACpC,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,SAAO,mDAAC,SAAI,WAAU,iDACrB;AAAA,uDAAC,QAAG,WAAU,sBAAqB,0BAAnC;AAAA;AAAA;AAAA;AAAA,WAA6C;AAAA,IAC5C,YAAY,SAAS,mDAAC,SAAI,WAAU,iFAAgF,MAAK,SACxH;AAAA,yDAAC,YAAO,WAAU,aAAY,uBAA9B;AAAA;AAAA;AAAA;AAAA,aAAqC;AAAA,MACrC,mDAAC,UAAK,WAAU,mBAAmB,qBAAW,SAA9C;AAAA;AAAA;AAAA;AAAA,aAAoD;AAAA,SAFhC;AAAA;AAAA;AAAA;AAAA,WAGrB;AAAA,IACD,mDAAC,QAAK,WAAU,0CAAyC,QAAO,QAC/D;AAAA,yDAAC,SAAI,WAAU,cACd;AAAA,2DAAC,WAAM,SAAQ,YAAW,uCAA1B;AAAA;AAAA;AAAA;AAAA,eAAiD;AAAA,QACjD,mDAAC,SAAM,cAAa,OAAM,WAAS,MAAC,UAAQ,MAAC,MAAK,QAAO,IAAG,YAAW,MAAK,cAA5E;AAAA;AAAA;AAAA;AAAA,eAAuF;AAAA,WAFxF;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,SAAI,WAAU,cACd;AAAA,2DAAC,WAAM,SAAQ,SAAQ,qBAAvB;AAAA;AAAA;AAAA;AAAA,eAA4B;AAAA,QAC5B,mDAAC,SAAM,UAAQ,MAAC,MAAK,SAAQ,IAAG,SAAQ,MAAK,WAA7C;AAAA;AAAA;AAAA;AAAA,eAAqD;AAAA,WAFtD;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,SAAI,WAAU,cACd;AAAA,2DAAC,WAAM,SAAQ,YAAW,wBAA1B;AAAA;AAAA;AAAA;AAAA,eAAkC;AAAA,QAClC,mDAAC,SAAM,UAAQ,MAAC,MAAK,YAAW,IAAG,YAAW,MAAK,cAAnD;AAAA;AAAA;AAAA;AAAA,eAA8D;AAAA,WAF/D;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,UAAO,WAAU,WAAU,MAAK,UAAS,sBAA1C;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAfD;AAAA;AAAA;AAAA;AAAA,WAgBA;AAAA,OAtBM;AAAA;AAAA;AAAA;AAAA,SAuBP;AACF;AACA,GAAG,aAAa,gCAAgC,OAAO,WAAY;AACjE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,aAAa;AAE9B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
